openapi: 3.0.0
info:
  title: NestJS Advanced POC API
  description: Advanced NestJS features demonstration with RBAC, Custom Decorators, Guards, and Exception Filters
  version: 1.0.0
  contact:
    name: Ankur Ram
servers:
  - url: http://localhost:3000
    description: Development server
security:
  - bearerAuth: []
paths:
  /:
    get:
      tags:
        - App
      summary: Get application status
      description: Returns welcome message
      responses:
        '200':
          description: Application is running
          content:
            text/plain:
              schema:
                type: string
                example: "Welcome to NestJS Advanced POC! ðŸš€"
  /health:
    get:
      tags:
        - App
      summary: Health check endpoint
      description: Returns application health status
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    example: 123.456
  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                username:
                  type: string
                  minLength: 3
                  example: "johndoe"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
                role:
                  type: string
                  enum: [admin, manager, user, guest]
                  example: "user"
                  description: "User role (defaults to USER)"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and get access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using current token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users (Admin/Manager only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user account (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/profile:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Get the profile of the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Users
      summary: Update current user profile
      description: Update the profile of the currently authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by ID (Admin/Manager only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Users
      summary: Update user by ID
      description: Update a specific user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Users
      summary: Delete user by ID
      description: Delete a specific user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/activate:
    patch:
      tags:
        - Users
      summary: Activate user
      description: Activate a user account (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/deactivate:
    patch:
      tags:
        - Users
      summary: Deactivate user
      description: Deactivate a user account (Admin/Manager only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          example: "johndoe"
        role:
          type: string
          enum: [admin, manager, user, guest]
          example: "user"
        permissions:
          type: array
          items:
            type: string
            enum: [read:users, write:users, delete:users, read:profile, write:profile, manage:system]
          example: ["read:profile", "write:profile"]
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2023-12-01T10:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-12-01T10:00:00.000Z"
    CreateUser:
      type: object
      required:
        - email
        - username
        - password
        - role
      properties:
        email:
          type: string
          format: email
          example: "newuser@example.com"
        username:
          type: string
          minLength: 3
          example: "newuser"
        password:
          type: string
          minLength: 6
          example: "password123"
        role:
          type: string
          enum: [admin, manager, user, guest]
          example: "user"
        permissions:
          type: array
          items:
            type: string
            enum: [read:users, write:users, delete:users, read:profile, write:profile, manage:system]
          example: ["read:profile", "write:profile"]
    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "updated@example.com"
        username:
          type: string
          minLength: 3
          example: "updateduser"
        role:
          type: string
          enum: [admin, manager, user, guest]
          example: "user"
        permissions:
          type: array
          items:
            type: string
            enum: [read:users, write:users, delete:users, read:profile, write:profile, manage:system]
          example: ["read:profile", "write:profile"]
    Error:
      type: object
      properties:
        statusCode:
          type: integer
          example: 401
        timestamp:
          type: string
          format: date-time
          example: "2023-12-01T10:00:00.000Z"
        path:
          type: string
          example: "/users"
        method:
          type: string
          example: "GET"
        error:
          type: string
          example: "Unauthorized"
        message:
          type: string
          example: "User not authenticated"
    ValidationError:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        timestamp:
          type: string
          format: date-time
          example: "2023-12-01T10:00:00.000Z"
        path:
          type: string
          example: "/auth/register"
        method:
          type: string
          example: "POST"
        error:
          type: string
          example: "Validation Error"
        message:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "email must be an email"

tags:
  - name: App
    description: Application status and health endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
